扉页
============

:更新时间:   2024/09/19

:原作者:

    .. line-block::

         薛冰冰(bingbing.xue@yunbosoft.com)

:项目主页:

    - `YUNBO 项目风格指南 - 中文版 <https://github.com/xueye9/zh-yunbo-styleguide>`_

作者前言
--------------------

公司项目管理逐渐切换为cmake,因一些历史原因cmake的编写风格在团队内不统一，鉴于此种情况，YUNBO发布了这份cmake编写规范，一遍所有人都能方便的获知 YUNBO 的编程风格。

编写初衷:

    规则的作用就是避免混乱. 但规则本身一定要权威, 有说服力, 并且是理性的. 我们所见过的大部分编程规范, 其内容或不够严谨, 或阐述过于简单, 或带有一定的武断性.

    YUNBO 指定统一的规范，方便团队协作和共享成果.

本文 使用 ``Artistic License/GPL`` 开源许可.

修订历史:
    - 2024-09 1.0 : 出自 `zh-google-styleguide 的 GitHub <https://github.com/zh-google-styleguide/zh-google-styleguide>`_, 复用了文档格式和文档组织思路.

以下是正文.

背景
--------------

CMake 是当前C/C++(其他语言也支持)技术栈比较流行编译工具，提供了跨平台以及友好的工程定义文件，其主要组件包括cmake、cmake-gui、ctest、cpack四个承担不同角色的工具.

本指南的目标是详述 CMake 工程定义规范，这些规则保持CMake工程文件的易于维护的同时，不影响程序员高效的开发程序.

风格 (style, 亦称作可读性 (readability)) 是用于管理 CMake 代码的惯例. "风格" 这一术语略有不准确, 因为这些惯例并非仅仅囊括代码格式.

YUNBO主导的大部分项目需遵守本指南的要求.

注意: 本指南并非 CMake 教程, 我们假定读者已经非常熟悉 CMake.

编译工具链的介绍请参考: `YUNBO 的 编译工具介绍 <https://wiki.yunbosoft.com/pages/viewpage.action?pageId=33625852>`_

本指南的目标
------------------

为什么编写这份文档？

我们认为该指南应该实现以下核心目标. 这些目标是每条规则背后的基本 **依据** . 我们希望公开这些想法, 作为讨论的基础, 让同事们了解每条规则和特定决策背后的来由. 在理解规则所服务的目标以后, 所有人都应该清楚某条规则在哪些情况下可以忽略 (有些规则可以忽略), 以及改变规则时需要提供怎样的论据和替代品.

我们认为风格指南当前的目标如下:

风格规则应该有影响力

    一条风格规则应该具备足够大的好处, 以至于值得所有工程师铭记. 所谓好处是相对于当前代码库的状态而言的, 所以即使某一习惯十分恶劣, 如果人们很少使用, 那么禁止这一习惯的好处依然很小. 这样可以解释为什么我们没有写下某些规则. 例如, ``add_definition`` 语句违背了精准控制原则, 但是现在已经很少出现, 所以风格指南不会讨论它.

为读者优化, 而非为作者优化

    我们的代码库 (以及其中的每个组件) 应该会存在很长时间. 因此, 我们读代码的时间比写代码的时间更长. 我们明确地选择优化平均水平的软件工程师阅读、维护和调试代码的体验, 而非编写代码的舒适度. "为读者留下线索" 是这一理念的一个方面. 如果代码中有特殊的情况 (例如指针所有权转移), 在此处给读者留下的文字提示很有价值 (在代码中使用 ``std::unique_ptr`` 就明确地表达了所有权转移).

和现有代码保持一致

    我们让代码库的风格保持整体一致, 就能聚焦在其他 (更有价值的) 问题上. 一致性也会帮助自动化: 那些格式化代码或者调整 ``#include`` 顺序的工具, 只能在你的代码符合预期时才能正常工作. 很多时候, 那些用于 "保持一致" 的规则本质上就是 "任选其一并停止内耗"; 在这些问题上, 争论的成本超过了提供自由度的价值. 不过, 一致性原则也有局限性. 在没有清晰的技术性论据和长远方向时, 这才是很好的打破平局的方式. 这一原则适合局部使用 (一个文件内, 或者一组关联性强的接口). 不应该为了一致性而采用旧风格, 忽视新风格的好处. 应该考虑到代码库会随时间推移而过渡到新风格.

恰当时与广大 CMake 最佳实践保持一致

    与其他组织保持一致性是有价值的, 这和我们保持内部一致性的原因一样. 如果 CMake 标准中的特性解决了某个问题, 或者某一范式被广泛采用, 这就是采纳它们的依据. 

避免使用奇特或危险的语法结构

    有些 CMake 的特性比表面上更加奇特或危险. 风格指南中的一些限制就是为了防止掉入这些陷阱. 你需要达到很高的标准才能豁免这些限制, 因为忽略这些规则就很可能直接引起程序错误.

避免使用那些正常水平的 C++ 程序员认为棘手或难以维护的语法结构

    有些 C++ 特性会给代码带来复杂性, 因此通常不适合使用. 在用途广泛的代码中, 我们可以接受更巧妙的语法结构. 这是因为复杂的实现方式所带来的收益会被众多使用者放大, 而且在编写新代码时, 也不需要重新解读这些复杂的语法. 如有疑问, 可以请求PL(Project Leader)豁免这些规则. 这对我们的代码库至关重要, 因为代码负责人和团队成员会变化: 即使所有现在修改这段代码的人都理解代码, 几年后人们就不一定还能理解了.

需要注意我们的规模

    我们有上百万行代码和近百名工程师, 因此一位工程师的失误或者投机取巧的行为会成为很多人的负担. 举例来说, 一定要避免污染全局命名空间 (global namespace): 如果所有人都往全局命名空间里塞东西, 就很难避免上百万行代码之间的冲突 (name collision), 也难以修复冲突.

在必要时为优化让路

    即使性能优化的手段会和此文档的其他理念冲突, 有时这些手段也是必要且恰当的.

此文档的目的是提供最大程度的指导和合理限制. 和往常一样, 你应该追随常理和正常审美. 这里我们特指整个谷歌 C++ 社区所建立的规范, 而不是你个人或者所在团队的偏好. 应该对巧妙或奇特的语法结构保持怀疑和犹豫的态度: 并不是 "法无禁止即可为". 运用你的判断力. 如有疑惑, 请不要犹豫, 随时向项目主管咨询意见.

CMake 版本
------------------

目前代码的目标版本是 CMake 3.27, 所以不应该使用 3.27 后的特性. 本指南的 CMake 目标版本会随时间 (激进地) 升级.

禁止使用非标准扩展.

在使用 CMake 更高级特性之前, 需要权衡其他环境的可移植性.
